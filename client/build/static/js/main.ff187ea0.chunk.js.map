{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Item","styled","Paper","theme","typography","body2","padding","spacing","textAlign","color","palette","text","secondary","App","React","useState","awsTips","setAwsTips","movies","setMovies","instance","setInstance","useEffect","fetch","process","then","res","json","data","console","log","message","tip","Box","sx","flexGrow","Grid","container","style","backgroundColor","item","xs","m","Typography","gutterBottom","variant","component","map","movie","undefined","info","plot","elevation","paddingTop","paddingLeft","Card","maxWidth","minHeight","CardContent","title","fontSize","fontWeight","fontStyle","year","genres","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff187ea0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: theme.palette.text.secondary,\n}));\n\nfunction App() {\n  const [awsTips, setAwsTips] = React.useState(null);\n  const [movies, setMovies] = React.useState(null);\n  const [instance, setInstance] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch(process.env.REACT_APP_LB + \"/awstips\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        console.log(\"---->\", data);\n        setAwsTips(data.message.tip);\n      });\n  }, []);\n\n  React.useEffect(() => {\n    fetch(\"/movies\")\n      .then((res) => res.json())\n      .then((data) => setMovies(data));\n  }, []);\n\n  React.useEffect(() => {\n    fetch(\"/instance\")\n      .then((res) => res.json())\n      .then((data) => setInstance(data));\n  }, []);\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container style={{ backgroundColor: \"#E8E4C7\" }}>\n        <Grid item xs={12} style={{ backgroundColor: \"#242645\" }}>\n          <Item style={{ backgroundColor: \"#242645\", color: \"#fff\" }}>\n            <h2>AWS Assignment 1 - C.Koutsiaris</h2>\n          </Item>\n        </Grid>\n        {instance ? (\n          <Grid container spacing={2} sx={{ m: 1 }}>\n            <Grid item xs={2}>\n              <Item style={{ backgroundColor: \"#456A50\", color: \"#fff\" }}>\n                <h3>Data from MetadataService:</h3>\n              </Item>\n            </Grid>\n            <Grid item xs={10}>\n              <Item style={{ textAlign: \"left\" }}>\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                  {!instance ? \"\" : instance}\n                </Typography>\n              </Item>\n            </Grid>\n          </Grid>\n        ) : (\n          \"\"\n        )}\n        <Grid container spacing={2} sx={{ m: 1 }}>\n          <Grid item xs={2}>\n            <Item style={{ backgroundColor: \"#456A50\", color: \"#fff\" }}>\n              <h3>Data from Lambda:</h3>\n            </Item>\n          </Grid>\n          <Grid item xs={10}>\n            <Item style={{ textAlign: \"left\" }}>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                {!awsTips ? \"Loading...\" : awsTips}\n              </Typography>\n            </Item>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2} sx={{ m: 1 }}>\n          <Grid item xs={2}>\n            <Item style={{ backgroundColor: \"#456A50\", color: \"#fff\" }}>\n              <h3>Data from DynamoDB:</h3>\n            </Item>\n          </Grid>\n          <Grid item xs={10}>\n            <Grid container spacing={2}>\n              {!movies\n                ? \"Loading...\"\n                : movies.map((movie) => {\n                    if (movie.info.plot !== undefined) {\n                      return (\n                        <Grid item xs={4} key={movie.title}>\n                          <Item\n                            elevation=\"0\"\n                            style={{\n                              backgroundColor: \"#E8E4C7\",\n                              paddingTop: 0,\n                              paddingLeft: 0,\n                            }}\n                          >\n                            <Card sx={{ maxWidth: 345, minHeight: 200 }}>\n                              <CardContent>\n                                <Typography\n                                  gutterBottom\n                                  variant=\"h5\"\n                                  component=\"div\"\n                                >\n                                  {movie.title}\n                                </Typography>\n                                <Typography\n                                  color=\"text.secondary\"\n                                  sx={{\n                                    fontSize: \"default\",\n                                    fontWeight: \"light\",\n                                    fontStyle: \"oblique\",\n                                  }}\n                                >\n                                  {movie.year} - {movie.info.genres[0]}\n                                </Typography>\n                                <Typography\n                                  variant=\"body2\"\n                                  color=\"text.secondary\"\n                                >\n                                  {movie.info.plot}\n                                </Typography>\n                              </CardContent>\n                            </Card>\n                          </Item>\n                        </Grid>\n                      );\n                    } else {\n                      return <div> </div>;\n                    }\n                  })}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}